// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Projects owned by this user
  ownedProjects Project[] @relation("ProjectOwner")

  // Projects where user is a member
  projectMemberships ProjectMember[]

  // Tasks assigned to this user
  assignedTasks Task[]

  // Invitations sent by this user
  sentInvitations ProjectInvitation[] @relation("InvitationSender")

  // Invitations received by this user
  receivedInvitations ProjectInvitation[] @relation("InvitationReceiver")

  // Notifications for this user
  notifications Notification[]

  @@map("users")
}

model Project {
  id          String   @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Owner of the project
  ownerId String
  owner   User   @relation("ProjectOwner", fields: [ownerId], references: [id], onDelete: Cascade)

  // Members of the project
  members ProjectMember[]

  // Tasks in this project
  tasks Task[]

  // Invitations for this project
  invitations ProjectInvitation[]

  @@map("projects")
}

model ProjectMember {
  id        String   @id @default(cuid())
  userId    String
  projectId String
  role      String   @default("member") // owner, member
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([userId, projectId])
  @@map("project_members")
}

model ProjectInvitation {
  id        String   @id @default(cuid())
  projectId String
  inviterId String
  inviteeId String
  status    String   @default("pending") // pending, accepted, rejected
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  inviter User    @relation("InvitationSender", fields: [inviterId], references: [id], onDelete: Cascade)
  invitee User    @relation("InvitationReceiver", fields: [inviteeId], references: [id], onDelete: Cascade)

  @@map("project_invitations")
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  type      String   // invitation_received, invitation_accepted, invitation_rejected
  title     String
  message   String
  data      String?  // JSON data for additional context
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model Task {
  id          String   @id @default(cuid())
  title       String
  description String?
  status      String   @default("todo") // todo, in-progress, done
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Project this task belongs to
  projectId String
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  // User assigned to this task
  assignedToId String?
  assignedTo   User?   @relation(fields: [assignedToId], references: [id], onDelete: SetNull)

  @@map("tasks")
}
